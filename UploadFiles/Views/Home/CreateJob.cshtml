@model UploadFiles.Models.NewJobViewModel

@{
    ViewBag.Title = "CreateJob";
}
<script>


    $(document).ready(function () {
        var $upload = $("#files");
        var allowMultiple = Boolean($upload.attr("multiple"));

        if ((IEnumerable<HttpPostedFileBase>)ViewBag.UploadedFiles.Any() != null) {
            var array = @Html.Raw(Json.Encode(((IEnumerable<HttpPostedFileBase>)ViewBag.UploadedFiles).Select(x => new
         {
             name = x.FileName,
             extension = x.ContentType,
             size = x.ContentLength

            })
        )
    )

        alert(array[0].name);
        }
        $upload.kendoUpload({
            async: {
                autoUpload: false
            },
            files: array
        }
        );
    });

</script>


<h2>CreateJob</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>NewJobViewModel</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.JobName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.JobName, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.JobName, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group" id="uploadFilesGroup">
            <div class="col-md-10 column">
                @Html.TextBoxFor(model => model.files, new { type = "File", name = "files" })

            </div>
        </div>


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
